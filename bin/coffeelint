#!/usr/bin/env node

// Require dependencies.
var path = require('path');
var fs = require('fs');
var optimist = require ('optimist');
var thisdir = path.dirname(fs.realpathSync(__filename));
var coffeelint = require(path.join(thisdir, '..', 'lib', 'coffeelint'));


// Stylize the given message
var stylize = function (message, styles) {

    // Borrowed this style map from vowsjs.org
    var map = {
        'bold'      : [1,  22],
        'yellow'    : [33, 39],
        'green'     : [32, 39],
        'red'       : [31, 39],
    };

    return styles.reduce(function (m, style) {
        return '\033[' + map[style][0] + 'm' + m +
               '\033[' + map[style][1] + 'm';
    }, message);
};

// Print an error to the console.
var reportError = function (path, error, colorize) {
    var fields = [
        path + "#" + error.lineNumber,
        error.level,
        error.message
    ];
    if (error.context) {
        fields.push(error.context)
    }
    console.warn(fields.join(" : "));
};

var reportSuccess = function (message, colorize) {
    var output = colorize ? stylize(message, ['bold', 'green']) : message;
    console.log(output);
};

// Return the file's contents.
var read = function (path) {
    var realPath = fs.realpathSync(path);
    return fs.readFileSync(realPath).toString();
};


// Lint the given files with the given configuration and print a report
// on the outcome. Return two booleans indicating whether we found errors and
// warnings, respectively.
var lint = function (paths, configPath, colorize, fileExtensions) {

    // Load the users configuration, if they've passed one.
    var config = (configPath) ? JSON.parse(read(configPath)) : {};

    var foundError = false;
    var foundWarning = false;

    // Lint and report on each script.
    paths.forEach(function (filePath) {
        var source;
        var stats = fs.statSync(filePath);
        var matchesExtension = false;
        if (stats.isFile()) {
            fileExtensions.forEach(function(extension) {
                if (filePath.indexOf(extension, filePath.length - extension.length) !== -1) {
                    matchesExtension = true;
                }
            });
            if (matchesExtension) {
                source = read(filePath);
                coffeelint.lint(source, config).forEach(function (error) {
                    reportError(filePath, error);
                    foundError = foundError || error.level === 'error';
                    foundWarning = foundWarning || error.level === 'warn';
                });
            }
        } else if (stats.isDirectory()) {
            fs.readdirSync(filePath).forEach(function (dirPath) {
                var returns = lint([path.join(filePath, dirPath)], configPath, colorize, fileExtensions);
                foundError = foundError || returns[0];
                foundWarning = foundWarning || returns[1];
            })
        } else {
            reportError(filePath, "Path does not appear to be a file or directory");
        }
    });

    // Return whether we've found errors or warnings
    return [foundError, foundWarning];
};


// Declare command line options.
var optimist = require('optimist')
    .usage('Usage: coffeelint [options] source [...]')
    .wrap(80)
    .alias('f', 'file')
    .alias('h', 'help')
    .alias('v', 'version')
    .describe('f', 'Specify a custom configuration file.')
    .describe('h', 'Print help information.')
    .describe('v', 'Print current version number.')
    .describe('filename', 'When parsing directories, only check filenames ' +
        'with these comma separated extensions (default: .coffee)')
    .default('filename', '.coffee')
    .describe('nocolor', "Don't colorize output.")
    .boolean('nocolor');

if (optimist.argv.v) {
    console.log(coffeelint.VERSION);
    process.exit(0);
} else if (optimist.argv.h) {
    optimist.showHelp();
    process.exit(0);
} else if (optimist.argv._.length < 1) {
    optimist.showHelp();
    process.exit(1);
} else {
    var paths = optimist.argv._;
    var configPath = optimist.argv.f;
    var colorize = !optimist.argv.nocolor;
    var fileExtensions = optimist.argv.filename.split(',');
    var returns = lint(paths, configPath, colorize, fileExtensions);
    var foundError = returns[0];
    var foundWarning = returns[1];
    var returnCode = (foundError) ? 1 : 0;

    // If we're good, print a success report.
    if (!foundError && !foundWarning) {
        reportSuccess('Lint free!', colorize);
    }

    process.exit(returnCode);
}

// vim: filetype=javascript
