#!/usr/bin/env node

// Require dependencies.
var path = require('path');
var fs = require('fs');
var optimist = require ('optimist');
var thisdir = path.dirname(fs.realpathSync(__filename));
var coffeelint = require(path.join(thisdir, '..', 'lib', 'coffeelint'));


// Stylize the given message.
var stylize = function (message, styles) {

    // Borrowed this style map from vowsjs.org
    var map = {
        'bold'      : [1,  22],
        'yellow'    : [33, 39],
        'green'     : [32, 39],
        'red'       : [31, 39],
    };

    return styles.reduce(function (m, style) {
        return '\033[' + map[style][0] + 'm' + m +
               '\033[' + map[style][1] + 'm';
    }, message);
};

// Print an error to the console.
var reportError = function (path, error, colorize) {
    var fields = [
        path + "#" + error.lineNumber,
        error.level,
        error.message
    ];
    if (error.context) {
        fields.push(error.context);
    }
    console.warn(fields.join(" : "));
};

var reportSuccess = function (message, colorize) {
    var output = colorize ? stylize(message, ['bold', 'green']) : message;
    console.log(output);
};

// Return the file's contents.
var read = function (path) {
    var realPath = fs.realpathSync(path);
    return fs.readFileSync(realPath).toString();
};

//Lint source, reporting any errors and adjusting messages as necessary
var lintSource = function(source, path, config, colorize){
    var messages = {foundError: false, foundWarning: false};
    coffeelint.lint(source, config).forEach(function(error){
        reportError(path, error);
        messages.foundError = messages.foundError || error.level === 'error';
        messages.foundWarning = messages.foundWarning || error.level === 'warn';
    });
    return messages;
};

//Lint the source of each given path.
var lintPaths = function(paths, config, colorize){
    var messages = {foundError: false, foundWarning: false};
    paths.forEach(function(path){
        var source = read(path);
        result_messages = lintSource(source, path, config, colorize);
        messages.foundError = messages.foundError || result_messages.foundError;
        messages.foundWarning = messages.foundWarning || result_messages.foundWarning;
    });
    return messages;
};

// Returns an exit code indicating the success of the operation.
var exitLint = function(messages){
    // If we're good, print a success report.
    if (!messages.foundError && !messages.foundWarning) {
        reportSuccess('Lint free!', colorize);
    }
    process.exit(messages.foundError ? 1 : 0);
};

// Declare command line options.
var optimist = require('optimist')
    .usage('Usage: coffeelint [options] source [...]')
    .alias('f', 'file')
    .alias('h', 'help')
    .alias('v', 'version')
    .describe('f', 'Specify a custom configuration file.')
    .describe('h', 'Print help information.')
    .describe('v', 'Print current version number.')
    .describe('s', 'Use stdin instead of a file')
    .boolean('s')
    .alias('s','stdin')
    .describe('nocolor', "Don't colorize output.")
    .boolean('nocolor');

if (optimist.argv.v) {
    console.log(coffeelint.VERSION);
    process.exit(0);
} else if (optimist.argv.h) {
    optimist.showHelp();
    process.exit(0);
} else if (optimist.argv._.length < 1 && !optimist.argv.stdin) {
    optimist.showHelp();
    process.exit(1);
} else {
    // Lint the given files with the given configuration and print a report.
    data = '';
    // Load the users configuration, if they've passed one.
    var config = (optimist.argv.f) ? JSON.parse(read(optimist.argv.f)) : {};
    var colorize = !optimist.argv.nocolor;
    var configPath = optimist.argv.f;
    
    if (optimist.argv.stdin){
       process.openStdin()
            .on('data', function(buffer){
                if(buffer){
                    data += buffer.toString();
                }
            })
            .on('end', function(){
                // Lint and report on the source.
                var messages = lintSource(data, '', config, colorize);
                exitLint(messages);
            });

    }else{
        // Lint and report on each script.
        var messages = lintPaths(optimist.argv._, config, colorize);
        exitLint(messages);
    }

}

// vim: filetype=javascript