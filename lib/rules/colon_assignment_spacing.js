// Generated by CoffeeScript 1.6.3
(function() {
  var ColonAssignmentSpacing;

  module.exports = ColonAssignmentSpacing = (function() {
    function ColonAssignmentSpacing() {}

    ColonAssignmentSpacing.prototype.rule = {
      name: 'colon_assignment_spacing',
      level: 'ignore',
      message: 'Colon assignment without proper spacing',
      spacing: {
        left: 0,
        right: 0
      },
      description: "<p>This rule checks to see that there is spacing before and\nafter the colon in a colon assignment (i.e., classes, objects).\nThe spacing amount is specified by\nspacing.left and spacing.right, respectively.\nA zero value means no spacing required.\n</p>\n<pre><code>\n#\n# If spacing.left and spacing.right is 1\n#\n\n# Good\nobject = {spacing : true}\nclass Dog\n  canBark : true\n\n# Bad\nobject = {spacing: true}\nclass Cat\n  canBark: false\n</code></pre>"
    };

    ColonAssignmentSpacing.prototype.tokens = [':'];

    ColonAssignmentSpacing.prototype.lintToken = function(token, tokenApi) {
      var checkSpacing, getSpaceFromToken, isLeftSpaced, isRightSpaced, leftSpacing, nextToken, previousToken, rightSpacing, spacingAllowances, _ref, _ref1;
      spacingAllowances = tokenApi.config[this.rule.name].spacing;
      previousToken = tokenApi.peek(-1);
      nextToken = tokenApi.peek(1);
      getSpaceFromToken = function(direction) {
        switch (direction) {
          case 'left':
            return token[2].first_column - previousToken[2].last_column - 1;
          case 'right':
            return nextToken[2].first_column - token[2].first_column - 1;
        }
      };
      checkSpacing = function(direction) {
        var isSpaced, spacing;
        spacing = getSpaceFromToken(direction);
        isSpaced = spacing < 0 ? true : spacing === parseInt(spacingAllowances[direction]);
        return [isSpaced, spacing];
      };
      _ref = checkSpacing('left'), isLeftSpaced = _ref[0], leftSpacing = _ref[1];
      _ref1 = checkSpacing('right'), isRightSpaced = _ref1[0], rightSpacing = _ref1[1];
      if (isLeftSpaced && isRightSpaced) {
        return null;
      } else {
        return {
          context: "Incorrect spacing around column " + token[2].first_column + ".\nExpected left: " + spacingAllowances.left + ", right: " + spacingAllowances.right + ".\nGot left: " + leftSpacing + ", right: " + rightSpacing + "."
        };
      }
    };

    return ColonAssignmentSpacing;

  })();

}).call(this);
