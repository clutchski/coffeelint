// Generated by CoffeeScript 1.6.3
(function() {
  var SpaceOperators,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = SpaceOperators = (function() {
    SpaceOperators.prototype.rule = {
      name: 'space_operators',
      level: 'ignore',
      message: 'Operators must be spaced properly',
      description: "This rule enforces that operators have space around them."
    };

    SpaceOperators.prototype.tokens = ["+", "-", "=", "MATH", "COMPARE", "LOGIC", "COMPOUND_ASSIGN", "(", ")", "CALL_START", "CALL_END"];

    function SpaceOperators() {
      this.callTokens = [];
      this.parenTokens = [];
    }

    SpaceOperators.prototype.lintToken = function(_arg, tokenApi) {
      var type;
      type = _arg[0];
      if (type === "CALL_START" || type === "CALL_END") {
        this.lintCall.apply(this, arguments);
        return void 0;
      }
      if (type === "(" || type === ")") {
        this.lintParens.apply(this, arguments);
        return void 0;
      }
      if (type === "+" || type === "-") {
        return this.lintPlus.apply(this, arguments);
      } else {
        return this.lintMath.apply(this, arguments);
      }
    };

    SpaceOperators.prototype.lintPlus = function(token, tokenApi) {
      var isUnary, p, unaries, _ref;
      if (this.isInInterpolation() || this.isInExtendedRegex()) {
        return null;
      }
      p = tokenApi.peek(-1);
      unaries = ['TERMINATOR', '(', '=', '-', '+', ',', 'CALL_START', 'INDEX_START', '..', '...', 'COMPARE', 'IF', 'THROW', 'LOGIC', 'POST_IF', ':', '[', 'INDENT', 'COMPOUND_ASSIGN', 'RETURN', 'MATH', 'BY', 'LEADING_WHEN'];
      isUnary = !p ? false : (_ref = p[0], __indexOf.call(unaries, _ref) >= 0);
      if ((isUnary && token.spaced) || (!isUnary && !token.spaced && !token.newLine)) {
        return {
          context: token[1]
        };
      } else {
        return null;
      }
    };

    SpaceOperators.prototype.lintMath = function(token, tokenApi) {
      if (!token.spaced && !token.newLine) {
        return {
          context: token[1]
        };
      } else {
        return null;
      }
    };

    SpaceOperators.prototype.isInExtendedRegex = function() {
      var t, _i, _len, _ref;
      _ref = this.callTokens;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (t.isRegex) {
          return true;
        }
      }
      return false;
    };

    SpaceOperators.prototype.lintCall = function(token, tokenApi) {
      var p;
      if (token[0] === 'CALL_START') {
        p = tokenApi.peek(-1);
        token.isRegex = p && p[0] === 'IDENTIFIER' && p[1] === 'RegExp';
        this.callTokens.push(token);
      } else {
        this.callTokens.pop();
      }
      return null;
    };

    SpaceOperators.prototype.isInInterpolation = function() {
      var t, _i, _len, _ref;
      _ref = this.parenTokens;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (t.isInterpolation) {
          return true;
        }
      }
      return false;
    };

    SpaceOperators.prototype.lintParens = function(token, tokenApi) {
      var i, n1, n2, p1;
      if (token[0] === '(') {
        p1 = tokenApi.peek(-1);
        n1 = tokenApi.peek(1);
        n2 = tokenApi.peek(2);
        i = n1 && n2 && n1[0] === 'STRING' && n2[0] === '+';
        token.isInterpolation = i;
        this.parenTokens.push(token);
      } else {
        this.parenTokens.pop();
      }
      return null;
    };

    return SpaceOperators;

  })();

}).call(this);
