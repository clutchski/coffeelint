// Generated by CoffeeScript 1.6.3
(function() {
  var ArrowSpacing;

  module.exports = ArrowSpacing = (function() {
    function ArrowSpacing() {}

    ArrowSpacing.prototype.rule = {
      name: 'arrow_spacing',
      level: 'ignore',
      message: 'Function arrow (->) must be spaced properly',
      description: "<p>This rule checks to see that there is spacing before and after\nthe arrow operator that declares a function. This rule is disabled\nby default.</p> <p>Note that if arrow_spacing is enabled, and you\npass an empty function as a parameter, arrow_spacing will accept\neither a space or no space in-between the arrow operator and the\nparenthesis</p>\n<pre><code># Both of this will not trigger an error,\n# even with arrow_spacing enabled.\nx(-> 3)\nx( -> 3)\n\n# However, this will trigger an error\nx((a,b)-> 3)\n</code>\n</pre>"
    };

    ArrowSpacing.prototype.tokens = ['->'];

    ArrowSpacing.prototype.lintToken = function(token, tokenApi) {
      var pp;
      pp = tokenApi.peek(-1);
      if (!(((token.spaced != null) || (token.newLine != null) || this.atEof(tokenApi)) && (((pp.spaced != null) || pp[0] === 'TERMINATOR') || (pp.generated != null) || pp[0] === "INDENT" || (pp[1] === "(" && (pp.generated == null))))) {
        return true;
      } else {
        return null;
      }
    };

    ArrowSpacing.prototype.atEof = function(tokenApi) {
      var i, token, tokens, _i, _len, _ref, _ref1;
      tokens = tokenApi.tokens, i = tokenApi.i;
      _ref = tokens.slice(i + 1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        token = _ref[_i];
        if (!(token.generated || ((_ref1 = token[0]) === 'OUTDENT' || _ref1 === 'TERMINATOR'))) {
          return false;
        }
      }
      return true;
    };

    return ArrowSpacing;

  })();

}).call(this);
