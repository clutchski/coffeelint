// Generated by CoffeeScript 1.6.3
(function() {
  var NoUnnecessaryFatArrows, any, isCode, isFatArrowCode, isThis, needsFatArrow;

  isCode = function(node) {
    return node.constructor.name === 'Code';
  };

  isFatArrowCode = function(node) {
    return isCode(node) && node.bound;
  };

  isThis = function(node) {
    return node.constructor.name === 'Value' && node.base.value === 'this';
  };

  any = function(arr, test) {
    return arr.reduce((function(res, elt) {
      return res || test(elt);
    }), false);
  };

  needsFatArrow = function(node) {
    return isCode(node) && (any(node.params, function(param) {
      return param.contains(isThis) != null;
    }) || (node.body.contains(isThis) != null) || (node.body.contains(function(child) {
      return isFatArrowCode(child) && needsFatArrow(child);
    }) != null));
  };

  module.exports = NoUnnecessaryFatArrows = (function() {
    function NoUnnecessaryFatArrows() {}

    NoUnnecessaryFatArrows.prototype.rule = {
      name: 'no_unnecessary_fat_arrows',
      level: 'warn',
      message: 'Unnecessary fat arrow',
      description: "Disallows defining functions with fat arrows when `this`\nis not used within the function."
    };

    NoUnnecessaryFatArrows.prototype.lintAST = function(node, astApi) {
      this.lintNode(node, astApi);
      return void 0;
    };

    NoUnnecessaryFatArrows.prototype.lintNode = function(node, astApi) {
      var error,
        _this = this;
      if ((isFatArrowCode(node)) && (!needsFatArrow(node))) {
        error = astApi.createError({
          lineNumber: node.locationData.first_line + 1
        });
        this.errors.push(error);
      }
      return node.eachChild(function(child) {
        return _this.lintNode(child, astApi);
      });
    };

    return NoUnnecessaryFatArrows;

  })();

}).call(this);
