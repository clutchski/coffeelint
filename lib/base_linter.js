// Generated by CoffeeScript 1.6.3
(function() {
  var BaseLinter, defaults, extend,
    __slice = [].slice;

  extend = function() {
    var destination, k, source, sources, v, _i, _len;
    destination = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (k in source) {
        v = source[k];
        destination[k] = v;
      }
    }
    return destination;
  };

  defaults = function(source, defaults) {
    return extend({}, defaults, source);
  };

  module.exports = BaseLinter = (function() {
    function BaseLinter(source, config, rules) {
      this.source = source;
      this.config = config;
      this.setupRules(rules);
    }

    BaseLinter.prototype.isObject = function(obj) {
      return obj === Object(obj);
    };

    BaseLinter.prototype.createError = function(ruleName, attrs) {
      var level;
      if (attrs == null) {
        attrs = {};
      }
      if (attrs.level == null) {
        attrs.level = this.config[ruleName].level;
      }
      level = attrs.level;
      if (level !== 'ignore' && level !== 'warn' && level !== 'error') {
        throw new Error("unknown level " + level);
      }
      if (level === 'error' || level === 'warn') {
        attrs.rule = ruleName;
        return defaults(attrs, this.config[ruleName]);
      } else {
        return null;
      }
    };

    BaseLinter.prototype.acceptRule = function(rule) {
      throw new Error("acceptRule needs to be overridden in the subclass");
    };

    BaseLinter.prototype.setupRules = function(rules) {
      var RuleConstructor, level, name, rule, _results;
      this.rules = [];
      _results = [];
      for (name in rules) {
        RuleConstructor = rules[name];
        level = this.config[name].level;
        if (level === 'error' || level === 'warn') {
          rule = new RuleConstructor(this, this.config);
          if (this.acceptRule(rule)) {
            _results.push(this.rules.push(rule));
          } else {
            _results.push(void 0);
          }
        } else if (level !== 'ignore') {
          throw new Error("unknown level " + level);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    BaseLinter.prototype.normalizeResult = function(p, result) {
      if (result === true) {
        return this.createError(p.rule.name);
      }
      if (this.isObject(result)) {
        return this.createError(p.rule.name, result);
      }
    };

    return BaseLinter;

  })();

}).call(this);
